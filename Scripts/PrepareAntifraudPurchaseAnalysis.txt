drop table if exists paymentantifraudhistory_datasend_analysis;
CREATE TEMPORARY TABLE paymentantifraudhistory_datasend_analysis (
	datasend varchar(65535),
	purchasepaymentdataid int4
)
diststyle key
distkey (purchasepaymentdataid)
sortkey (purchasepaymentdataid);

drop table if exists paymentantifraudhistory_id_analysis;
CREATE TEMPORARY TABLE paymentantifraudhistory_id_analysis (
	paymentantifraudhistoryid int4,
	purchasepaymentdataid int4
)
diststyle key
distkey (paymentantifraudhistoryid)
sortkey (paymentantifraudhistoryid, purchasepaymentdataid);

drop table if exists purchase_analysis;
create temporary table purchase_analysis (
	purchaseid int4,
	purchaseruseraccountid int4,
	purchaseinitiated timestamp,
	deviceinstallid varchar(36),
	facebookuserid varchar(56),
	emailaddress varchar(310),
	password varchar(330),
	totalvalue numeric(15,2),
	StatusAnalysis varchar(500),
	data_da_analise timestamp
)
diststyle key
distkey (purchaseid)
sortkey (purchaseid);

 --Sure Fraud
 insert into purchase_analysis(purchaseid,purchaseruseraccountid,purchaseinitiated,deviceinstallid,facebookuserid,emailaddress,password,totalvalue,StatusAnalysis, data_da_analise)
 select p.purchaseid
		 		,p.purchaseruseraccountid
		 		,p.purchaseinitiated 
		 		,p.deviceinstallid
		 		,uafc.facebookuserid
		 		,ua.emailaddress
		 		,ua.password
		 		,p.totalvalue
		 		,listagg(distinct afa.status,', ') 	within group (order by afa.status) as StatusAnalysis
		 		,max(afa.data_da_analise) data_da_analise
from reports.antifraudanalysis afa 
left join ods.cupon c on c.buyeruseraccountid = afa.userid
left join ods.purchase p on c.purchaseid = p.purchaseid
left JOIN stage.useraccountfacebookconnect uafc ON (uafc.useraccountid = afa.userid)
left join ods.useraccount ua on ua.useraccountid = afa.userid
left join ods.purchasepaymentdata ppd on ppd.internalreferencenumber = p.purchaseid
left join reports.AntifraudPurchaseAnalysis apa on apa.purchaseid = p.purchaseid
where afa.status in ('SUre Fraud','Sure FRaud','Sure Fraud','Sure fraud','Sure fraude','sure Fraud','sure fraud')
	and p.purchaseid is not null
	and apa.purchaseid is null
group by p.purchaseid
 		,p.purchaseruseraccountid
 		,p.purchaseinitiated 
 		,p.deviceinstallid
 		,uafc.facebookuserid
 		,ua.emailaddress
 		,ua.password
 		,p.totalvalue;
 
 --POtential ATO
 insert into purchase_analysis(purchaseid,purchaseruseraccountid,purchaseinitiated,deviceinstallid,facebookuserid,emailaddress,password,totalvalue,StatusAnalysis,data_da_analise)
 select p.purchaseid
		 		,p.purchaseruseraccountid
		 		,p.purchaseinitiated 
		 		,p.deviceinstallid
		 		,uafc.facebookuserid
		 		,ua.emailaddress
		 		,ua.password
		 		,p.totalvalue
		 		,listagg(distinct afa.status,', ') 	within group (order by afa.status) as StatusAnalysis
		 		,max(afa.data_da_analise) data_da_analise
from reports.antifraudanalysis afa 
left join ods.cupon c on c.buyeruseraccountid = afa.userid
left join ods.purchase p on c.purchaseid = p.purchaseid
left JOIN stage.useraccountfacebookconnect uafc ON (uafc.useraccountid = afa.userid)
left join ods.useraccount ua on ua.useraccountid = afa.userid
left join ods.purchasepaymentdata ppd on ppd.internalreferencenumber = p.purchaseid
left join reports.AntifraudPurchaseAnalysis apa on apa.purchaseid = p.purchaseid
left join purchase_analysis pa on pa.purchaseid = p.purchaseid
where
	(cast(afa.data_da_analise as date) = cast(laststatusdate as date) OR
	cast(p.purchaseinitiated as date) between cast(dateadd(day,-7,afa.data_da_analise) as date) and cast(afa.data_da_analise as date))
	and afa.status in ('POtential ATO','Pontential ATO','Potantial ATO','Potato ATO','Potentia ATO','Potential  ATO','Potential ATO'
						,'Potential ATo','Potential Ato','Potential ato','PotentialAto','Potetial ATO')
	--and canceldate is not null
	and p.purchaseid is not null
	and apa.purchaseid is null and pa.purchaseid is null
group by p.purchaseid
 		,p.purchaseruseraccountid
 		,p.purchaseinitiated 
 		,p.deviceinstallid
 		,uafc.facebookuserid
 		,ua.emailaddress
 		,ua.password
 		,p.totalvalue;
		
--pega id historico para buscar os dados de cpf,ip,telefone chargeback;
insert into paymentantifraudhistory_id_analysis(
	paymentantifraudhistoryid,
	purchasepaymentdataid
)
select distinct pah.paymentantifraudhistoryid, ppd.purchasepaymentdataid
	from ods.paymentantifraudhistory pah
		inner join ods.paymentantifraud pa on pa.paymentantifraudid = pah.paymentantifraudid --and pa.paymentantifraudclassid = 8
		inner join ods.purchasepaymentdata ppd on ppd.purchasepaymentdataid = pa.purchasepaymentdataid
		inner join purchase_analysis p on p.purchaseid = ppd.internalreferencenumber;

insert into paymentantifraudhistory_datasend_analysis (
	datasend,
	purchasepaymentdataid
)
select distinct pah.datasend, paht.purchasepaymentdataid
from paymentantifraudhistory_id_analysis paht
	inner join ods.paymentantifraudhistory pah on paht.paymentantifraudhistoryid = pah.paymentantifraudhistoryid
    where pah.datasend <> '';
    
drop table if exists paymentantifraudhistory_id_analysis; 

insert into reports.AntifraudPurchaseAnalysis (
	purchaseid,
	purchaseruseraccountid,
	purchaseinitiated,
	deviceinstallid,
	facebookuserid,
	emailaddress,
	password,
	ddd,
	telefone,
	CPF,
	IP,
	cardnumber,
	cardholdername,
	expirationyear,
	expirationmonth,
	cardtype,
	totalvalue,
	StatusAnalysis,
	data_da_analise
) 
select
		  p.purchaseid
		, p.purchaseruseraccountid 
		, p.purchaseinitiated
 		, p.deviceinstallid
 		, p.facebookuserid
 		, COALESCE(max((case 
 						when replace(regexp_substr(pah.datasend,'<UserEmail>[A-Za-z0-9.:/_%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]'),'<UserEmail>','') = '' then (replace(regexp_substr(pah.datasend,'<_document_ClearSale_Orders_Order_Email>[A-Za-z0-9.:/_%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]'),'<_document_ClearSale_Orders_Order_Email>',''))
 						else replace(regexp_substr(pah.datasend,'<UserEmail>[A-Za-z0-9.:/_%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]'),'<UserEmail>','')
 					end)),p.emailaddress) emailaddress
 		, p.password 
		, max(COALESCE(case 
				when left(replace(regexp_substr(pah.datasend,'<billingNumber>[A-Za-z0-9.:/-]*'),'<billingNumber>',''),2) <> '' then left(replace(regexp_substr(pah.datasend,'<billingNumber>[A-Za-z0-9.:/-]*'),'<billingNumber>',''),2)
				when (replace(regexp_substr(pah.datasend,'<_document_ClearSale_Orders_Order_CollectionData_Phones_Phone_DDD>[A-Za-z0-9– . –]*'),'<_document_ClearSale_Orders_Order_CollectionData_Phones_Phone_DDD>','')) <> '' then (replace(regexp_substr(pah.datasend,'<_document_ClearSale_Orders_Order_CollectionData_Phones_Phone_DDD>[A-Za-z0-9– . –]*'),'<_document_ClearSale_Orders_Order_CollectionData_Phones_Phone_DDD>',''))
				else left(replace(regexp_substr(pah.datasend,'<_document_RequestScore_Telephone>[A-Za-z0-9– . –]*'),'<_document_RequestScore_Telephone>',''),2) end 
		  ,'')) as DDD
		, max(COALESCE(case
				when right(replace(regexp_substr(pah.datasend,'<billingNumber>[A-Za-z0-9.:/-]*'),'<billingNumber>',''),9) <> '' then right(replace(regexp_substr(pah.datasend,'<billingNumber>[A-Za-z0-9.:/-]*'),'<billingNumber>',''),9) 
				when (replace(regexp_substr(pah.datasend,'<_document_ClearSale_Orders_Order_CollectionData_Phones_Phone_Number>[A-Za-z0-9– . –]*'),'<_document_ClearSale_Orders_Order_CollectionData_Phones_Phone_Number>','')) <> '' then (replace(regexp_substr(pah.datasend,'<_document_ClearSale_Orders_Order_CollectionData_Phones_Phone_Number>[A-Za-z0-9– . –]*'),'<_document_ClearSale_Orders_Order_CollectionData_Phones_Phone_Number>',''))
				else right(replace(regexp_substr(pah.datasend,'<_document_RequestScore_Telephone>[A-Za-z0-9– . –]*'),'<_document_RequestScore_Telephone>',''),9) end 
		   ,'')) as TELEFONE
		, max(COALESCE(case
				when replace(regexp_substr(pah.datasend,'<billingCPF>[A-Za-z0-9.:/-]*'),'<billingCPF>','') = '' then (replace(regexp_substr(pah.datasend,'<_document_ClearSale_Orders_Order_CollectionData_LegalDocument1>[A-Za-z0-9.:/-]*'),'<_document_ClearSale_Orders_Order_CollectionData_LegalDocument1>',''))
				else replace(regexp_substr(pah.datasend,'<billingCPF>[A-Za-z0-9.:/-]*'),'<billingCPF>','') end
		   ,'')) as CPF
		, max(COALESCE(case
				when replace(regexp_substr(pah.datasend,'<ipAddress>[A-Za-z0-9.:/-]*'),'<ipAddress>','') = '' then (replace(regexp_substr(pah.datasend,'<_document_ClearSale_Orders_Order_IP>[A-Za-z0-9.:/-]*'),'<_document_ClearSale_Orders_Order_IP>',''))
				else replace(regexp_substr(pah.datasend,'<ipAddress>[A-Za-z0-9.:/-]*'),'<ipAddress>','') end 
		   ,'')) as IP	
		, max(replace(ppd.cardnumber,'"','')) as cardnumber
		, max(ppd.cardholdername) as cardholdername
		, max(ppd.expirationyear) as expirationyear
		, max(ppd.expirationmonth) as expirationmonth
		, max(COALESCE(replace(regexp_substr(pah.datasend,'<_document_RequestScore_payment_methods_payment_type>[A-Za-z0-9– . –]*'),'<_document_RequestScore_payment_methods_payment_type>',''),'')) as cardtype
		, max(p.totalvalue) as totalvalue
		, p.StatusAnalysis
		, p.data_da_analise
from purchase_analysis p
	left join ods.purchasepaymentdata ppd on p.purchaseid = ppd.internalreferencenumber
    left join paymentantifraudhistory_datasend_analysis pah on ppd.purchasepaymentdataid = pah.purchasepaymentdataid
group by p.purchaseid
		, p.purchaseruseraccountid 
		, p.purchaseinitiated
 		, p.deviceinstallid
 		, p.facebookuserid
 		, p.emailaddress
 		, p.password
 		, p.StatusAnalysis
 		, p.data_da_analise;
 		
 drop table if exists paymentantifraudhistory_datasend_analysis;
 drop table if exists purchase_analysis;